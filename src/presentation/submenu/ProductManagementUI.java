package presentation.submenu;

import bussiness.service.product.IProductService;
import bussiness.service.product.ProductServiceImpl;
import entity.Product;
import presentation.IGenericUI;
import presentation.MainMenuAfterLogin;
import static utils.PrintUtils.*;
import static validate.InputMethod.*;
import static validate.ProductValidator.*;


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ProductManagementUI implements IGenericUI {
    private final ProductServiceImpl productServiceImpl;

    public ProductManagementUI() {
        productServiceImpl = ProductServiceImpl.getInstance();
    }

    @Override
    public void showMenu() {
        System.out.println(WHITE_BOLD_BRIGHT + "========== QU·∫¢N L√ç ƒêI·ªÜN THO·∫†I ==========");
        System.out.println("1. Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m");
        System.out.println("2. Th√™m s·∫£n ph·∫©m m·ªõi");
        System.out.println("3. C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m");
        System.out.println("4. X√≥a s·∫£n ph·∫©m theo ID");
        System.out.println("5. T√¨m ki·∫øm theo brand");
        System.out.println("6. T√¨m ki·∫øm theo kho·∫£ng gi√°");
        System.out.println("7. T√¨m ki·∫øm theo t·ªìn kho");
        System.out.println("8. Quay l·∫°i menu ch√≠nh");
        System.out.println("========================================="+ RESET);
    }

    public void runPhoneManagement() {
        Scanner sc = new Scanner(System.in);
        while (true) {
            showMenu();
            System.out.print(YELLOW_BOLD_BRIGHT +"‚ùî Nh·∫≠p l·ª±a ch·ªçn: " + RESET);
            byte choice = Byte.parseByte(sc.nextLine());

            switch (choice) {
                case 1:
                    getAllProductsInPresentation();
                    break;
                case 2:
                    addMultipleProductsInPresentation(sc);
                    break;
                case 3:
                    updateProductInPresentation(sc);
                    break;
                case 4:
                    deleteProductInPresentation(sc);
                    break;
                case 5:
                    getProductsByBrandNameInPresentation(sc);
                    break;
                case 6:
                    getProductByPriceInPresentation(sc);
                    break;
                case 7:
                    getProductByStockInPresentation(sc);
                    break;
                case 8:
                    MainMenuAfterLogin.runMainMenu();
                    return;
                default:
                    System.out.println(RED_BOLD_BRIGHT +"üò≠L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"+ RESET);
                    break;
            }
        }
    }

    private void addMultipleProductsInPresentation(Scanner sc) {
        int count = validateIntInput(sc, YELLOW_BOLD_BRIGHT +"‚ùî Nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b·∫°n mu·ªën th√™m: ");

        List<Product> products = new ArrayList<>();

        for (int i = 0; i < count; i++) {
            Product product = new Product();
            System.out.println(YELLOW_UNDERLINED + "üëå Nh·∫≠p th√¥ng tin s·∫£n ph·∫©m th·ª© " + (i + 1)+ RESET);

            product.setName(validateName(sc, YELLOW_BOLD_BRIGHT + "üòä Nh·∫≠p t√™n s·∫£n ph·∫©m: ", productServiceImpl));

            product.setBrand(validateInputNotEmpty(sc, "üòã Nh·∫≠p t√™n nh√£n h√†ng: "));

            product.setPrice(validateDoubleInput(sc, "üòó Nh·∫≠p gi√° b√°n: "));

            product.setStock(validateIntInput(sc, "ü§î Nh·∫≠p s·ªë l∆∞·ª£ng t·ªìn kho: " + RESET));

            products.add(product);
            System.out.println();
        }
        productServiceImpl.addMultiple(products);
    }

    private void getAllProductsInPresentation() {
        List<Product> products = productServiceImpl.getAll();
        DisplayUIHelper.showProductList(products);
    }

    private void getProductsByBrandNameInPresentation(Scanner sc) {
        String brand = validateInputNotEmpty(sc, YELLOW_BOLD_BRIGHT + "‚ùî Nh·∫≠p t√™n brand c·∫ßn t√¨m: "+ RESET);

        List<Product> products = productServiceImpl.getProductsByBrandName(brand);

        if (products.isEmpty()) {
            System.out.println(RED_BOLD +"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o theo brand \"" + brand + "\"." + RESET);
            return;
        }
        DisplayUIHelper.showProductList(products);
    }

    // ch·ªânh s·ª≠a s·∫£n ph·∫©m theo id
    private void updateProductInPresentation(Scanner sc) {
        int id = validateIntInput(sc,YELLOW_BOLD_BRIGHT + "‚ùî Nh·∫≠p id c·ªßa s·∫£n ph·∫©m mu·ªën s·ª≠a: " + RESET);

        Product product = productServiceImpl.getById(id);
        if (product == null) {
            System.out.println(RED_BOLD +"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ id = " + id + RESET);
            return;
        }

        while (true) {
            System.out.println(CYAN_BOLD_BRIGHT + CYAN_UNDERLINED + "C√°c th√¥ng tin c√≥ th·ªÉ ch·ªânh s·ª≠a: "+ RESET);
            System.out.println(CYAN_BRIGHT + "1ü•ó T√™n s·∫£n ph·∫©m");
            System.out.println("2üçó T√™n nh√£n h√†ng");
            System.out.println("3üçú G√≠a b√°n");
            System.out.println("4üç∂ S·ªë l∆∞·ª£ng t·ªìn kho");
            System.out.println("5üòé ƒê√£ xong, tho√°t");
            System.out.println("......................" + RESET);
            System.out.print(YELLOW_BOLD_BRIGHT + "„ÉΩÔºà‚âß‚ñ°‚â¶Ôºâ„Éé B·∫°n chon c√°i n√†o: ");
            byte choice = Byte.parseByte(sc.nextLine());

            switch (choice) {
                case 1:
                    product.setName(validateName(sc, "üòã Nh·∫≠p t√™n m·ªõi cho s·∫£n ph·∫©m n√†y: ", productServiceImpl));
                    break;
                case 2:
                    product.setBrand(validateInputNotEmpty(sc, "üòä Nh·∫≠p t√™n nh√£n h√†ng m·ªõi cho s·∫£n ph·∫©m n√†y: "));
                    break;
                case 3:
                    product.setPrice(validateDoubleInput(sc, "ü´° Nh·∫≠p gi√° m·ªõi cho s·∫£n ph·∫©m n√†y: "));
                    break;
                case 4:
                    product.setStock(validateIntInput(sc, "ü•∞ Nh·∫≠p s·ªë l∆∞·ª£ng t·ªìn kho m·ªõi cho s·∫£n ph·∫©m n√†y: " + RESET));
                    break;
                case 5:
                    System.out.println(GREEN_BOLD_BRIGHT + "üéâ ƒê√£ ho√†n th√†nh vi·ªác ch·ªânh s·ª≠a s·∫£n ph·∫©m!" + RESET);
                    productServiceImpl.update(product);
                    return;
                default:
                    System.out.println(RED_BOLD_BRIGHT + "üÜò B·∫•m l·ªôn r·ªìi b·∫°n √™yyyyy, ch·ªçn l·∫°i ƒëi nh√≥e ^^" + RESET);
                    break;
            }
        }
    }

    private void deleteProductInPresentation(Scanner sc) {
        int id = validateIntInput(sc, YELLOW_BOLD_BRIGHT + "‚ùî Nh·∫≠p id c·ªßa s·∫£n ph·∫©m mu·ªën x√≥a: " + RESET);

        Product product = productServiceImpl.getById(id);
        if (product == null) {
            System.out.println(RED_BOLD + "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ id = " + id+ RESET);
            return;
        }
        System.out.print(PURPLE_BOLD_BRIGHT + "üîÜ C√≥ s·∫£n ph·∫©m trong kho, b·∫°n c√≥ mu·ªën x√≥a n√≥ kh√¥ng (c√≥ = 'y', kh√¥ng = 'n'): " + RESET);
        String answer = sc.nextLine();

        if (answer.equals("y")) {
            productServiceImpl.deleteById(id);
            System.out.println(GREEN_BOLD_BRIGHT +"‚úÖ ƒê√£ x√≥a s·∫£n pham c√≥ id = " + id+ RESET);
        } else if (answer.equals("n")) {
            System.out.println(GREEN_BOLD_BRIGHT + "‚ùé ƒê√£ h·ªßy thao t√°c xoa ƒë·ªëi v·ªõi s·∫£n ph·∫©m c√≥ id = " + id + RESET);
        } else {
            System.out.println(RED_BOLD_BRIGHT + "üò≠L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª±c hi·ªán l·∫°i thao t√°c t·ª´ ƒë·∫ßu." + RESET);
        }
    }

    private void getProductByPriceInPresentation(Scanner sc) {
        double minPrice = validateDoubleInput(sc, YELLOW_BOLD_BRIGHT + "‚ùî Nh·∫≠p gi√° th·∫•p nh·∫•t: ");
        double maxPrice = validateDoubleInput(sc, "‚ùî Nh·∫≠p gi√° cao nh·∫•t: " + RESET);
        List<Product> list = productServiceImpl.getProductsByPrice(minPrice, maxPrice);

        if (list.isEmpty()) {
            System.out.println(RED_BOLD + "‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m trong kho·∫£ng gi√° n√†y!"+ RESET);
            return;
        }

        DisplayUIHelper.showProductList(list);
    }

    private void getProductByStockInPresentation(Scanner sc) {
        int minStock = validateIntInput(sc, YELLOW_BOLD_BRIGHT + "‚ùî Nh·∫≠p so l∆∞·ª£ng t·ªìn kho √≠t nh·∫•t: ");
        int maxStock = validateIntInput(sc, "‚ùî Nh·∫≠p so l∆∞·ª£ng t·ªìn kho nhi·ªÅu nh·∫•t: " + RESET);
        List<Product> list = productServiceImpl.getProductsByStock(minStock, maxStock);

        if (list.isEmpty()) {
            System.out.println(RED_BOLD +"‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m trong kho·∫£ng s·ªë l∆∞·ª£ng t·ªìn kho n√†y!"+RESET);
            return;
        }
        DisplayUIHelper.showProductList(list);
    }
}

package presentation.submenu;

import bussiness.service.product.IProductService;
import bussiness.service.product.ProductServiceImpl;
import entity.Product;
import presentation.IGenericUI;
import presentation.MainMenuAfterLogin;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ProductManagementUI implements IGenericUI {
    private final IProductService productServiceImpl;

    public ProductManagementUI() {
        productServiceImpl = ProductServiceImpl.getInstance();
    }

    @Override
    public void showMenu() {
        System.out.println("========== QU·∫¢N L√ç ƒêI·ªÜN THO·∫†I ==========");
        System.out.println("1. Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m");
        System.out.println("2. Th√™m s·∫£n ph·∫©m m·ªõi");
        System.out.println("3. C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m");
        System.out.println("4. X√≥a s·∫£n ph·∫©m theo ID");
        System.out.println("5. T√¨m ki·∫øm theo brand");
        System.out.println("6. T√¨m ki·∫øm theo kho·∫£ng gi√°");
        System.out.println("7. T√¨m ki·∫øm theo t·ªìn kho");
        System.out.println("8. Quay l·∫°i menu ch√≠nh");
        System.out.println("=========================================");
    }

    public void runPhoneManagement() {
        Scanner sc = new Scanner(System.in);
        while (true) {
            showMenu();
            System.out.print("Nh·∫≠p l·ª±a ch·ªçn: ");
            byte choice = Byte.parseByte(sc.nextLine());

            switch (choice) {
                case 1:
                    getAllProductsInPresentation();
                    break;
                case 2:
                    addMultipleProductsInPresentation(sc);
                    break;
                case 3:
                    updateProductInPresentation(sc);
                    break;
                case 4:
                    deleteProductInPresentation(sc);
                    break;
                case 5:
                    getProductsByBrandNameInPresentation(sc);
                    break;
                case 6:
                    getProductByPriceInPresentation(sc);
                    break;
                case 7:
                    getProductByStockInPresentation(sc);
                    break;
                case 8:
                    MainMenuAfterLogin.runMainMenu();
                    return;
                default:
                    System.out.println("üò≠L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
                    break;
            }
        }
    }

    private void addMultipleProductsInPresentation(Scanner sc) {
        System.out.print("‚ùîNh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b·∫°n mu·ªën th√™m: ");
        int count = Integer.parseInt(sc.nextLine());

        List<Product> products = new ArrayList<>();

        for (int i = 0; i < count; i++) {
            Product product = new Product();
            System.out.println("üëå Nh·∫≠p th√¥ng tin s·∫£n ph·∫©m th·ª© " + (i + 1));
            System.out.print("üòä Nh·∫≠p t√™n s·∫£n ph·∫©m: ");
            product.setName(sc.nextLine());
            System.out.print("üòã Nh·∫≠p t√™n nh√£n h√†ng: ");
            product.setBrand(sc.nextLine());
            System.out.print("üòó Nh·∫≠p gi√° b√°n: ");
            product.setPrice(Double.parseDouble(sc.nextLine()));
            System.out.print("ü§î Nh·∫≠p s·ªë l∆∞·ª£ng t·ªìn kho: ");
            product.setStock(Integer.parseInt(sc.nextLine()));
            products.add(product);
            System.out.println();
        }

        productServiceImpl.addMultiple(products);
    }

    private void getAllProductsInPresentation() {
        List<Product> products = productServiceImpl.getAll();

        if (products.isEmpty()) {
            System.out.println("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.");
            return;
        }
        System.out.println("========== Danh S√°ch S·∫£n Ph·∫©m ==========");
        for (Product product : products) {
            System.out.println("ID: " + product.getId() + ", Name: " + product.getName() +
                    ", Brand: " + product.getBrand() + ", Price: " + product.getPrice() +
                    ", Stock: " + product.getStock());
        }
        System.out.println("========================================");
    }

    private void getProductsByBrandNameInPresentation(Scanner sc) {
        System.out.print("Nh·∫≠p t√™n brand c·∫ßn t√¨m: ");
        String brand = sc.nextLine();

        List<Product> products = productServiceImpl.getProductsByBrandName(brand);

        if (products.isEmpty()) {
            System.out.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o theo brand \"" + brand + "\".");
            return;
        }

        System.out.println("========== K·∫øt Qu·∫£ T√¨m Ki·∫øm ==========");
        for (Product product : products) {
            System.out.println("ID: " + product.getId() + ", Name: " + product.getName() +
                    ", Brand: " + product.getBrand() + ", Price: " + product.getPrice() +
                    ", Stock: " + product.getStock());
        }
        System.out.println("=======================================");
    }

    private void updateProductInPresentation(Scanner sc) {
        System.out.print("Nh·∫≠p id c·ªßa s·∫£n ph·∫©m mu·ªën s·ª≠a: ");
        int id = Integer.parseInt(sc.nextLine());

        Product product = productServiceImpl.getById(id);
        if (product == null) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ id = " + id);
            return;
        }

        while (true) {
            System.out.println("C√°c th√¥ng tin c√≥ th·ªÉ ch·ªânh s·ª≠a: ");
            System.out.println("1ü•ó T√™n s·∫£n ph·∫©m");
            System.out.println("2üçó T√™n nh√£n h√†ng");
            System.out.println("3üçú G√≠a b√°n");
            System.out.println("4üç∂ S·ªë l∆∞·ª£ng t·ªìn kho");
            System.out.println("5üòé ƒê√£ xong, tho√°t");
            System.out.println("......................");
            System.out.print("„ÉΩÔºà‚âß‚ñ°‚â¶Ôºâ„Éé B·∫°n chon c√°i n√†o: ");
            byte choice = Byte.parseByte(sc.nextLine());

            switch (choice) {
                case 1:
                    System.out.print("Nh·∫≠p t√™n m·ªõi cho s·∫£n ph·∫©m n√†y: ");
                    product.setName(sc.nextLine());
                    break;
                case 2:
                    System.out.print("Nh·∫≠p t√™n nh√£n h√†ng m·ªõi cho s·∫£n ph·∫©m n√†y: ");
                    product.setBrand(sc.nextLine());
                    break;
                case 3:
                    System.out.print("Nh·∫≠p gi√° m·ªõi cho s·∫£n ph·∫©m n√†y: ");
                    product.setPrice(Double.parseDouble(sc.nextLine()));
                    break;
                case 4:
                    System.out.print("Nh·∫≠p s·ªë l∆∞·ª£ng t·ªìn kho m·ªõi cho s·∫£n ph·∫©m n√†y: ");
                    product.setStock(Integer.parseInt(sc.nextLine()));
                    break;
                case 5:
                    System.out.println("üéâ ƒê√£ ho√†n th√†nh vi·ªác ch·ªânh s·ª≠a s·∫£n ph·∫©m!");
                    productServiceImpl.update(product);
                    return;
                default:
                    System.out.println("B·∫•m l·ªôn r·ªìi b·∫°n √™yyyyy, ch·ªçn l·∫°i ƒëi nh√≥e ^^");
                    break;
            }
        }
    }

    private void deleteProductInPresentation(Scanner sc) {
        System.out.print("Nh·∫≠p id c·ªßa s·∫£n ph·∫©m mu·ªën x√≥a: ");
        int id = Integer.parseInt(sc.nextLine());

        Product product = productServiceImpl.getById(id);
        if (product == null) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ id = " + id);
            return;
        }
        System.out.print("üîÜ C√≥ s·∫£n ph·∫©m trong kho, b·∫°n c√≥ mu·ªën x√≥a n√≥ kh√¥ng (c√≥ = 'y', kh√¥ng = 'n'): ");
        String answer = sc.nextLine();

        if (answer.equals("y")) {
            productServiceImpl.deleteById(id);
            System.out.println("‚úÖ ƒê√£ x√≥a s·∫£n pham c√≥ id = " + id);
        } else if (answer.equals("n")) {
            System.out.println("‚ùé ƒê√£ h·ªßy thao t√°c xoa ƒë·ªëi v·ªõi s·∫£n ph·∫©m c√≥ id = "+id);
        } else {
            System.out.println("üò≠L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª±c hi·ªán l·∫°i thao t√°c t·ª´ ƒë·∫ßu.");
        }
    }

    private void getProductByPriceInPresentation(Scanner sc) {
        System.out.print("===> Nh·∫≠p gi√° th·∫•p nh·∫•t: ");
        double minPrice = Double.parseDouble(sc.nextLine());
        System.out.print("===> Nh·∫≠p gi√° cao nh·∫•t: ");
        double maxPrice = Double.parseDouble(sc.nextLine());
        List<Product> list = productServiceImpl.getProductsByPrice(minPrice, maxPrice);

        if (list.isEmpty()) {
            System.out.println("Kh√¥ng c√≥ s·∫£n ph·∫©m trong kho·∫£ng gi√° n√†y!");
            return;
        }

        System.out.println("========== K·∫øt Qu·∫£ T√¨m Ki·∫øm ==========");
        for (Product product : list) {
            System.out.println("ID: " + product.getId() + ", Name: " + product.getName() +
                    ", Brand: " + product.getBrand() + ", Price: " + product.getPrice() +
                    ", Stock: " + product.getStock());
        }
        System.out.println("=======================================");
    }

    private void getProductByStockInPresentation(Scanner sc) {
        System.out.print("===> Nh·∫≠p so l∆∞·ª£ng t·ªìn kho √≠t nh·∫•t: ");
        int minStock = Integer.parseInt(sc.nextLine());
        System.out.print("===> Nh·∫≠p so l∆∞·ª£ng t·ªìn kho nhi·ªÅu nh·∫•t: ");
        int maxStock = Integer.parseInt(sc.nextLine());
        List<Product> list = productServiceImpl.getProductsByStock(minStock, maxStock);

        if (list.isEmpty()) {
            System.out.println("Kh√¥ng c√≥ s·∫£n ph·∫©m trong kho·∫£ng s·ªë l∆∞·ª£ng t·ªìn kho n√†y!");
            return;
        }

        System.out.println("========== K·∫øt Qu·∫£ T√¨m Ki·∫øm ==========");
        for (Product product : list) {
            System.out.println("ID: " + product.getId() + ", Name: " + product.getName() +
                    ", Brand: " + product.getBrand() + ", Price: " + product.getPrice() +
                    ", Stock: " + product.getStock());
        }
        System.out.println("=======================================");
    }
}

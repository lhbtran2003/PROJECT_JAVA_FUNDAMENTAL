package presentation.submenu;

import bussiness.dto.InvoiceCreateDTO;
import bussiness.dto.InvoiceDetailCreateDTO;
import bussiness.dto.InvoiceViewDTO;
import bussiness.service.customer.CustomerServiceImpl;
import bussiness.service.invoice.InvoiceServiceImp;
import bussiness.service.invoicedetail.InvoiceDetailServiceImp;
import bussiness.service.product.ProductServiceImpl;
import entity.Customer;
import entity.Invoice;
import entity.Product;
import presentation.IGenericUI;
import presentation.MainMenuAfterLogin;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class InvoiceManagementUI implements IGenericUI {
    private final InvoiceServiceImp invoiceService;
    private final CustomerServiceImpl customerService;
    private final ProductServiceImpl productService;
    private final InvoiceDetailServiceImp invoiceDetailService;

    public InvoiceManagementUI() {
        invoiceService = InvoiceServiceImp.getInstance();
        customerService = CustomerServiceImpl.getInstance();
        productService = ProductServiceImpl.getInstance();
        invoiceDetailService = InvoiceDetailServiceImp.getInstance();
    }

    @Override
    public void showMenu() {
        System.out.println("========== QU·∫¢N L√ç H√ìA ƒê∆†N ==========");
        System.out.println("1. Hi·ªÉn th·ªã danh s√°ch h√≥a ƒë∆°n");
        System.out.println("2. Th√™m m·ªõi h√≥a ƒë∆°n");
        System.out.println("3. T√¨m ki·∫øm h√≥a ƒë∆°n");
        System.out.println("4. Quay l·∫°i menu ch√≠nh");
    }

    public void showMenuSearching() {
        System.out.println("1. T√¨m ki·∫øm theo ten kh√°ch h√†ng");
        System.out.println("2. T√¨m ki·∫øm theo ng√†y/th√°ng/nƒÉm");
        System.out.println("3. Quay l·∫°i menu h√≥a ƒë∆°n");
    }

    public void runMenuSearching(Scanner sc) {
        showMenuSearching();
        System.out.print("===> Nh·∫≠p l·ª±a ch·ªçn t√¨m ki·∫øm: ");
        byte choice = Byte.parseByte(sc.nextLine());
        switch (choice) {
            case 1:
                getInvoiceByCustomerName(sc);
                break;
            case 2:
                getInvoiceByDate(sc);
                break;
            case 3:
                runInvoiceUI();
                break;
            default:
                System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
                break;
        }
    }

    public void runInvoiceUI() {
        Scanner sc = new Scanner(System.in);
        InvoiceManagementUI invoiceManagementUI = new InvoiceManagementUI();
        while (true) {
            invoiceManagementUI.showMenu();
            System.out.print("Nh·∫≠p l·ª±a ch·ªçn: ");
            byte choice = Byte.parseByte(sc.nextLine());
            switch (choice) {
                case 1:
                    getAllInvoicesInPresentation();
                    break;
                case 2:
                    createInvoiceInPresentation(sc);
                    break;
                case 3:
                    runMenuSearching(sc);
                    break;
                case 4:
                    MainMenuAfterLogin.runMainMenu();
                    break;
                default:
                    System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
                    break;
            }
        }
    }

    private void getAllInvoicesInPresentation() {
        List<Invoice> list = invoiceService.getAll();
        if (list.isEmpty()) {
            System.out.println("Danh s√°ch h√≥a ƒë∆°n hi·ªán trang tr·ªëng!");
            return;
        }

        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        System.out.println("------------------------ Danh s√°ch h√≥a ƒë∆°n ---------------------------");
        System.out.printf("| %-2s | %-15s | %-20s | %-20s |\n", "ID", "T√™n kh√°ch h√†ng", "Th·ªùi gian t·∫°o", "T·ªïng ti·ªÅn");
        for (Invoice invoice : list) {

            String customerName = customerService.getById(invoice.getCustomerId()).getName();
            LocalDateTime dateTime = LocalDateTime.parse(invoice.getCreateAt(), inputFormatter);
            String formattedDate = dateTime.format(outputFormatter);

            System.out.printf("| %-2s | %-15s | %-20s | %-20s |\n", invoice.getId(), customerName, formattedDate, invoice.getTotalAmount());
        }
        System.out.println("--------------------------------------------------------------------");
    }

    private int handleCustomerInput(Scanner sc) {
        System.out.print("Nh·∫≠p t√™n kh√°ch h√†ng: ");
        String name = sc.nextLine();
        List<Customer> customerList = customerService.getCustomerByName(name);

        if (customerList == null || customerList.isEmpty()) {
            System.out.println("Kh√°ch h√†ng ch∆∞a c√≥ trong danh s√°ch, s·∫Ω ti·∫øn h√†nh t·∫°o m·ªõi.");
            Customer newCustomer = new Customer();
            newCustomer.setName(name);
            System.out.print("üòã Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i: ");
            newCustomer.setPhone(sc.nextLine());
            System.out.print("üòó Nh·∫≠p email: ");
            newCustomer.setEmail(sc.nextLine());
            System.out.print("ü§î Nh·∫≠p ƒë·ªãa ch·ªâ: ");
            newCustomer.setAddress(sc.nextLine());

            List<Customer> toAdd = new ArrayList<>();
            toAdd.add(newCustomer);
            customerService.addMultiple(toAdd);

            return customerService.getCustomerByName(name).getFirst().getId();
        } else {
            DisplayUIHelper.showCustomerList(customerList);
            System.out.print("Nh·∫≠p ID kh√°ch h√†ng mu·ªën t·∫°o h√≥a ƒë∆°n: ");
            return Integer.parseInt(sc.nextLine());
        }
    }


    private Map<Product, Integer> handleProductSelection(Scanner sc) {
        List<Product> productList = productService.getAll();
        DisplayUIHelper.showProductList(productList);

        Map<Product, Integer> selectedProducts = new HashMap<>();
        while (true) {
            System.out.print("Nh·∫≠p ID s·∫£n ph·∫©m mu·ªën mua (0 ƒë·ªÉ d·ª´ng): ");
            int id = Integer.parseInt(sc.nextLine());
            if (id == 0) break;

            Product product = productService.getById(id);
            if (product == null) {
                System.out.println("‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
                continue;
            }

            System.out.print("Nh·∫≠p s·ªë l∆∞·ª£ng b·∫°n mu·ªën mua: ");
            int quantity = Integer.parseInt(sc.nextLine());
            if (quantity > product.getStock()) {
                System.out.println("‚ö†Ô∏è S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß.");
            } else {
                if (selectedProducts.containsKey(product)) {
                    selectedProducts.put(product, selectedProducts.get(product) + quantity);
                } else {
                    selectedProducts.put(product, quantity);
                }
            }
        }
        return selectedProducts;
    }

    // t√≠nh t·ªïng gi√°
    private BigDecimal calculateTotalPrice(Map<Product, Integer> selectedProducts) {
        return BigDecimal.valueOf(selectedProducts.entrySet()
                .stream()
                .mapToDouble(entry -> entry.getKey().getPrice() * entry.getValue())
                .sum());
    }

    private void createInvoiceInPresentation(Scanner sc) {
        int customerId = handleCustomerInput(sc);

        Map<Product, Integer> selectedProducts = handleProductSelection(sc);

        BigDecimal totalPrice = calculateTotalPrice(selectedProducts);

        InvoiceCreateDTO invoiceCreateDTO = new InvoiceCreateDTO();
        invoiceCreateDTO.setCustomerId(customerId);
        invoiceCreateDTO.setTotalPrice(totalPrice);

        List<InvoiceDetailCreateDTO> detailList = new ArrayList<>();


        for (Map.Entry<Product, Integer> entry : selectedProducts.entrySet()) {
            // th·ª© t·ª± l·∫ßn l∆∞·ª£t: invoice_id, product_id, quantity, unit_price
            InvoiceDetailCreateDTO invoiceDetail = new InvoiceDetailCreateDTO();

            invoiceDetail.setProductId(entry.getKey().getId());
            invoiceDetail.setQuantity(entry.getValue());
            invoiceDetail.setUnitPrice(BigDecimal.valueOf(entry.getKey().getPrice()));

            detailList.add(invoiceDetail);

        }
        invoiceService.createInvoice(invoiceCreateDTO, detailList);
    }

    private void getInvoiceByCustomerName(Scanner sc) {
        System.out.print("Nh·∫≠p ten kh√°ch h√†ng c·∫ßn tra c·ª©u h√≥a ƒë∆°n: ");
        String customerName = sc.nextLine();

        List<InvoiceViewDTO> listInvoiceSuitable = invoiceService.findByCustomerName(customerName);

        if (listInvoiceSuitable.isEmpty()) {
            System.out.println("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n n√†o cho kh√°ch h√†ng c√≥ t√™n: " + customerName);
            return;
        }

        System.out.println("---------------------DANH S√ÅCH H√ìA ƒê∆†N PH√ô H·ª¢P -------------------------");
        System.out.printf("| %-5s | %-20s | %-15s | %-20s |\n", "ID", "T√™n kh√°ch h√†ng", "T·ªïng ti·ªÅn", "Ng√†y t·∫°o");
        System.out.println("------------------------------------------------------------------------");

        for (InvoiceViewDTO invoice : listInvoiceSuitable) {
            System.out.printf("| %-5d | %-20s | %-15.2f | %-20s |\n",
                    invoice.getId(),
                    invoice.getCustomerName(),
                    invoice.getTotalAmount(),
                    invoice.getCreateAt()
            );
        }
        System.out.println("------------------------------------------------------------------------");
    }

    private void getInvoiceByDate(Scanner sc) {
        System.out.print("Nh·∫≠p ng√†y c·∫ßn tra c·ª©u h√≥a ƒë∆°n (dd/MM/yyyy ho·∫∑c dd-MM-yyyy): ");
        String inputDate = sc.nextLine();

        List<InvoiceViewDTO> invoices = invoiceService.findByDate(inputDate);

        if (invoices.isEmpty()) {
            System.out.println("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n n√†o v√†o ng√†y " + inputDate);
            return;
        }

        System.out.println("---------------------DANH S√ÅCH H√ìA ƒê∆†N PH√ô H·ª¢P -------------------------");
        System.out.printf("| %-5s | %-20s | %-15s | %-20s |\n", "ID", "T√™n kh√°ch h√†ng", "T·ªïng ti·ªÅn", "Ng√†y t·∫°o");
        System.out.println("------------------------------------------------------------------------");
        for (InvoiceViewDTO invoice : invoices) {
            System.out.printf("| %-5d | %-20s | %-15.2f | %-20s |\n",
                    invoice.getId(),
                    invoice.getCustomerName(),
                    invoice.getTotalAmount(),
                    invoice.getCreateAt()
            );
        }
        System.out.println("------------------------------------------------------------------------");
    }
}


